#!/bin/bash

# Exit immediately if a command exits with a non-zero status
set -e

# Step 1: Create a directory for dependencies
mkdir -p ../deps
cd ../deps

# Step 2: Build OpenSSL for Android ARM64
echo "Building OpenSSL for Android ARM64..."
OPENSSL_VERSION="1.1.1v"
curl -O https://www.openssl.org/source/openssl-${OPENSSL_VERSION}.tar.gz
tar -xzf openssl-${OPENSSL_VERSION}.tar.gz
cd openssl-${OPENSSL_VERSION}

# Configure and build for Android ARM64 using NDK
export CC=aarch64-linux-android21-clang
export CXX=aarch64-linux-android21-clang++
./Configure android-arm64 no-shared --prefix=$(pwd)/output
make -j$(nproc)
make install
cd ..

# Step 3: Build other native dependencies (example: libzmq)
echo "Building libzmq for Android ARM64..."
LIBZMQ_VERSION="4.3.4"
curl -L https://github.com/zeromq/libzmq/releases/download/v${LIBZMQ_VERSION}/zeromq-${LIBZMQ_VERSION}.tar.gz -o libzmq.tar.gz
tar -xzf libzmq.tar.gz
cd zeromq-${LIBZMQ_VERSION}
mkdir -p build
cd build

# Use CMake with NDK toolchain to build libzmq
cmake .. \
  -DCMAKE_TOOLCHAIN_FILE=$ANDROID_NDK_HOME/build/cmake/android.toolchain.cmake \
  -DANDROID_ABI=arm64-v8a \
  -DANDROID_PLATFORM=21 \
  -DCMAKE_INSTALL_PREFIX=$(pwd)/output
make -j$(nproc)
make install
cd ../..

# Step 4: Verify and cleanup
echo "Dependencies built successfully!"
rm -rf openssl-${OPENSSL_VERSION}*
rm -rf zeromq-${LIBZMQ_VERSION}*

# The built dependencies will be available in their respective "output" directories.
